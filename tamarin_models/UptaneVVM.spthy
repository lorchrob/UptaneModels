theory UptaneVVM
begin

builtins: hashing, asymmetric-encryption, signing

  //////////////////////////
  ///////// RULES //////////
  //////////////////////////

  rule generate_key_pair:
  [ Fr(~secret_key) ]
  --[ GenKeyPair(~secret_key), Unique($ID) ]->
  [ !Ltk($ID, ~secret_key), !Pk($ID, pk(~secret_key)) ]

  rule get_public_key:
  [ !Pk($ID, public_key) ]
  --[ GetPubKey(public_key) ]->
  [ Out(public_key) ]

  // rule key_compromise1:
  // [ ~Ltk('Primary', secret_key) ]
  // -->
  // [ Out(secret_key) ]

  // rule key_compromise2:
  // [ ~Ltk('Secondary', secret_key) ]
  // -->
  // [ Out(secret_key) ]

  rule secondary_send_ecu_version_report:
  [ !Ltk('Secondary', ~secondary_secret_key), Fr(~ecu_version_report) ]
  --[ SendEcuVRep(~ecu_version_report) ]->
  [ 
    Out(< ~ecu_version_report, 
          sign(~ecu_version_report, ~secondary_secret_key) > ) 
  ]

  rule primary_generate_ecu_version_report:
  [ !Ltk('Primary', ~primary_secret_key), Fr(~ecu_version_report) ]
  --[ GenEcuVRep(~ecu_version_report) ]->
  [ 
    PrimaryVRep(~ecu_version_report, sign(~ecu_version_report, ~primary_secret_key)) 
  ]
  
  rule primary_send_vvm:
  let vvm = < < ecu_version_report, sig >, < secondary_version_report, secondary_sig > >
  in
  [ 
    !Ltk('Primary', ~primary_secret_key), 
    PrimaryVRep(ecu_version_report, sig),
    In(< secondary_version_report, secondary_sig >)
  ]
  --[ SendVVM(vvm) ]->
  [ Out(< vvm, sign(vvm, ~primary_secret_key) >) ]

  // Note-- checking for freshness of nonces is performed at the CRV level
  rule director_verify_vvm:
  let vvm = < < ecu_version_report, sig >, < secondary_version_report, secondary_sig > > in
  [ 
    !Pk('Primary', primary_public_key), 
    !Pk('Secondary', secondary_public_key),
    In(< vvm, signature >) 
  ]
  --[ 
      Eq(verify(signature, vvm, primary_public_key), true),
      Eq(verify(sig, ecu_version_report, primary_public_key), true),
      Eq(verify(secondary_sig, secondary_version_report, secondary_public_key), true),
      VerifyVVM(vvm)
    ]->
  [ ]

  //////////////////////////
  ////// RESTRICTIONS //////
  //////////////////////////

  restriction Equality:
    "All x y #i. Eq(x, y) @#i ==> x = y"

  restriction Unique:
    "All x #i #j. Unique(x) @#i & Unique(x) @#j ==> #i = #j"

  //////////////////////////
  ///////// LEMMAS /////////
  //////////////////////////  

  //// Sanity-check lemma
  lemma sanity_check:
    exists-trace 
      "Ex vvm #i. VerifyVVM(vvm) @#i"
  
  //// Weak authentication lemma
  lemma vvm_weak_auth: 
    "All vvm #i. (VerifyVVM(vvm) @#i ==> (Ex #j. SendVVM(vvm) @#j & #j<#i))"

  //// Strong authentication lemma
  lemma vvm_strong_auth:
  "All m #i. VerifyVVM(m) @#i ==> 
    (Ex #j. SendVVM(m) @#j
      & #j < #i
      & not (Ex #i2. VerifyVVM(m) @#i2
                            & not (#i2 = #i)))"
end