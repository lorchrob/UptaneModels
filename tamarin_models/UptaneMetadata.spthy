theory UptaneMetadata
begin

heuristic: o "oracle"

builtins: hashing, asymmetric-encryption, signing

  //////////////////////////
  ///////// RULES //////////
  //////////////////////////

  /// KEY GENERATION ///
  // Generate public key
  rule generate_key_pair:
  [ Fr(~secret_key) ]
  --[ GenKeyPair(~secret_key), Unique($ID) ]->
  [ !Ltk($ID, ~secret_key), !Pk($ID, pk(~secret_key)) ]

  // Get public key
  rule get_public_key:
  [ !Pk($ID, public_key) ]
  --[ GetPubKey(public_key) ]->
  [ Out(public_key) ]

  /// INITIALIZATION ///
  rule initialize:
  [ 
    Fr(~root_seckey), 
    Fr(~timestamp_seckey), Fr(~snapshot_seckey), 
    Fr(~targets_seckey), Fr(~snapshot), 
    Fr(~primary_image), Fr(~secondary_image)
  ]
  --[ Unique('initialize') ]->
  [ 
    //// Primary metadata ////
    PriMeta(
      // Root metadata
      <
        pk(~root_seckey),
        pk(~timestamp_seckey), 
        pk(~snapshot_seckey),
        pk(~targets_seckey)
      >,
      // Timestamp metadata
      h(~snapshot), 
      // Snapshot metadata
      ~snapshot, 
      // Targets metadata
      < h(~primary_image), h(~secondary_image) >,
      // Targets signature
      sign(< h(~primary_image), h(~secondary_image) >, ~targets_seckey), 
      // State
      'Not_verifying'
    ),

    PriLatestTargets(< h(~primary_image), h(~secondary_image) >, 
        sign(< h(~primary_image), h(~secondary_image) >, ~targets_seckey)
    ),

    !RepoState(
      <
        // Root metadata
        < pk(~root_seckey),
        pk(~timestamp_seckey),
        pk(~snapshot_seckey), 
        pk(~targets_seckey) >,
        // Timestamp metadata
        h(~snapshot), 
        // Snapshot metadata
        ~snapshot, 
        // Targets metadata
        < h(~primary_image), h(~secondary_image) >
      >,

      // Keys
      <
        ~root_seckey,
        ~timestamp_seckey, 
        ~snapshot_seckey,  
        ~targets_seckey
      >,

      // Old keys
      ~root_seckey,

      // Version
      '0'
    ),

    !ImageState(
      // Images
      <
        ~primary_image, ~secondary_image
      >,
      // Version
      '0'
    ),

    SecMeta(
      pk(~targets_seckey),
      < h(~primary_image), h(~secondary_image) >
    )
  ]

  
  //// REPOSITORY ////
  rule gen_metadata:
  [
    !ImageState(<~primary_image, ~secondary_image>, version),
    !RepoState(
      <
        // Root metadata
        < pk(~root_seckey), pk(~timestamp_seckey), 
         pk(~snapshot_seckey),  
          pk(~targets_seckey) >,
        // Timestamp metadata
        h(snapshot), 
        // Snapshot metadata
        snapshot, 
        // Targets metadata
        < primary_image_hash, secondary_image_hash >
      >,
      keys, old_keys, '0'
    ),
    Fr(~new_snapshot),
    Fr(~new_root_seckey), Fr(~new_timestamp_seckey), 
    Fr(~new_snapshot_seckey), 
    Fr(~new_targets_seckey)
  ]
  --[Unique('gen_metadata')]->
  [
    !RepoState(
      <
        // Root metadata
        < pk(~root_seckey), pk(~timestamp_seckey), 
         pk(~snapshot_seckey),  
          pk(~targets_seckey) >,
        // Timestamp metadata
        h(~new_snapshot), 
        // Snapshot metadata
        ~new_snapshot, 
        // Targets metadata
        < h(~primary_image), h(~secondary_image) >
        >,
         // Keys
      <
      ~new_root_seckey, ~new_timestamp_seckey, 
      ~new_snapshot_seckey,
      ~new_targets_seckey
    >,
    // Old keys
    ~root_seckey,
    '1'
    )
  ]

  // rule gen_root_metadata:
  // [
  //   !RepoState(
  //     // Metadata
  //     <
  //       // Root metadata
  //       < pk(root_seckey), pk(timestamp_seckey), 
  //         pk(snapshot_seckey), pk(targets_seckey) >,
  //       // Timestamp metadata
  //       h(snapshot), 
  //       // Snapshot metadata
  //       snapshot, 
  //       // Targets metadata
  //       < primary_image_hash, secondary_image_hash >
  //     >,
  //     // Keys
  //     <
  //       root_seckey, timestamp_seckey, 
  //       snapshot_seckey, targets_seckey
  //     >,
  //     // Old keys
  //     old_keys,
  //     // Version
  //     '1'
  //   ),

  //   Fr(~new_root_seckey), Fr(~new_timestamp_seckey), 
  //   Fr(~new_snapshot_seckey), 
  //   Fr(~new_targets_seckey)
  // ]
  // --[Unique('gen_root_metadata')]->
  // [
  //   !RepoState(
  //     // Metadata
  //     <
  //       // Root metadata
  //       < pk(~new_root_seckey), pk(~new_timestamp_seckey), 
  //         pk(~new_snapshot_seckey),  
  //         pk(~new_targets_seckey) >,
  //       // Timestamp metadata
  //       h(snapshot), 
  //       // Snapshot metadata
  //       snapshot, 
  //       // Targets metadata
  //       < primary_image_hash, secondary_image_hash >
  //     >,
  //     // Keys
  //     <
  //       ~new_root_seckey, ~new_timestamp_seckey, 
  //       ~new_snapshot_seckey,
  //       ~new_targets_seckey
  //     >,
  //     // Old keys
  //     root_seckey,
  //     // Version
  //     '2'
  //   )
  // ]

  //// KEY COMPROMISE ////
  // rule key_compromise:
  // [
  //   !RepoState(< root, timestamp, ~snapshot, targets >, 
  //     < ~seckey1, ~seckey2, ~seckey3, ~seckey4 >,
  //     ~old_root_seckey, version)
  // ]
  // --[Unique('key_compromise')]->
  // [
  //   Out( < ~seckey1, ~seckey2, ~seckey3, ~seckey4 >)
  // ]
  
  //// SEND METADATA ////
  rule send_root_metadata:
  let root = <pk(~root_seckey), 
              pk(~ts), pk(~ss), 
              pk(~tr) > in
  [ 
    !RepoState(< root, timestamp, ~snapshot, targets >, 
      < ~root_seckey, c, d, e >,
      ~old_root_seckey, version)
  ]
  --[
      LatestDirector(version),
      SendRootMetadataDir(root),
      Unique('send_root_metadata')
    ]->
  [  
    Out(root),
    Out( <
      sign(root, ~root_seckey), 
      sign(root, ~old_root_seckey) >)
  ]

  
  rule send_timestamp_metadata:
  let timestamp = h(~snapshot) in
  [ 
    !RepoState(< root, timestamp, ~snapshot, targets >,
      < a, ~timestamp_seckey, c, d >,
      old_keys, version)
  ]
  --[
      LatestDirector(version),
      SendTimestampMetadataDir(timestamp),
      Unique('send_timestamp_metadata')
    ]->
  [  
    Out(timestamp), 
    Out(sign(timestamp, ~timestamp_seckey))
  ]
  
  
  rule send_snapshot_metadata:
  [ 
    !RepoState(< root, timestamp, ~snapshot, targets >,
      < a, c, ~snapshot_seckey, e >,
      old_keys, version)
  ]
  --[
      LatestDirector(version),
      SendSnapshotMetadataDir(~snapshot),
      Unique('send_snapshot_metadata')
    ]->
  [  
    Out(~snapshot),
    Out(sign(~snapshot, ~snapshot_seckey))
  ]

  rule send_targets_metadata:
  let targets = < h(~primary_image), h(~secondary_image) > in
  [ 
    !RepoState(< root, timestamp, snapshot, targets >,
      < a, c, d, ~targets_seckey >,
      old_keys, version) 
  ]
  --[
      LatestDirector(version),
      SendTargetsMetadataDir(targets),
      SendTargetsCombined(targets),
      Unique('send_targets_metadata')
    ]->
  [  
    Out(targets),
    Out(sign(targets, ~targets_seckey))
  ]

  // Primary verify metadata
  rule primary_verify_meta_root:
  let root =    <  pk(~root_seckey),
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) > 
      new_root = < new_root_pubkey, 
                   a, b, c > 
  in
  [ 
    In(new_root), 
    In(< sig1, sig2 >),
    PriMeta(root, timestamp, snapshot, targets, sigs, any_state)
  ]
  --[ 
    
      Eq(verify(sig1, new_root, pk(~root_seckey)), true),
      Eq(verify(sig2, new_root, new_root_pubkey), true),
      PriVerifyMetaDirRoot(new_root),
      Unique('primary_verify_meta_root')
    ]->
  [ 
    PriMeta(new_root, timestamp, snapshot, targets, sigs, 'Verified_meta_root')
  ]

    // Primary verify metadata
    rule primary_verify_meta_root2:
    let root =    <  pk(~root_seckey),
                     pk(~timestamp_seckey),
                     pk(~snapshot_seckey), 
                     pk(~targets_seckey) > 
        new_root = < new_root_pubkey,
                     a, b, c > 
    in
    [ 
      In(new_root), 
      In(< sig1, sig2 >),
      PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_root')
    ]
    --[ 
      
        Eq(verify(sig1, new_root, pk(~root_seckey)), true),
        Eq(verify(sig2, new_root, new_root_pubkey), true),
        PriVerifyMetaDirRoot(new_root),
        Unique('primary_verify_meta_root2')
      ]->
    [ 
      PriMeta(new_root, timestamp, snapshot, targets, sigs, 'Verified_meta_root')
    ]
  
  // Primary verify metadata
  rule primary_verify_meta_timestamp:
  let root = < pk(~root_seckey), 
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) >
  in
  [ 
    In(new_timestamp),
    In(sig),
    PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_root')
  ]
  --[ 
      Eq(verify(sig, new_timestamp, pk(~timestamp_seckey)), true),
      PriVerifyMetaDirTimestamp(new_timestamp),
      Unique('primary_verify_meta_timestamp')
    ]->
  [ 
    PriMeta(root, new_timestamp, snapshot, targets, sigs, 'Verified_meta_timestamp')
  ]

  // Primary verify metadata
  rule primary_verify_meta_timestamp2:
  let root = < pk(~root_seckey),
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) >
  in
  [ 
    In(new_timestamp),
    In(sig),
    PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_timestamp')
  ]
  --[ 
      Eq(verify(sig, new_timestamp, pk(~timestamp_seckey)), true),
      PriVerifyMetaDirTimestamp(new_timestamp),
      Unique('primary_verify_meta_timestamp2')
    ]->
  [ 
    PriMeta(root, new_timestamp, snapshot, targets, sigs, 'Verified_meta_timestamp')
  ]

  // Primary verify director metadata
  rule primary_verify_meta_snapshot:
  let root = < pk(~root_seckey), 
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) > 
  in
  [ 
    In(new_snapshot),
    In(sig ),
    PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_timestamp')
  ]
  --[ 
      Eq(verify(sig, new_snapshot, pk(~snapshot_seckey)), true),
      Eq(h(new_snapshot), timestamp),
      PriVerifyMetaDirSnapshot(new_snapshot),
      Unique('primary_verify_meta_snapshot')
    ]->
  [ 
    PriMeta(root, timestamp, new_snapshot, targets, sigs, 'Verified_meta_snapshot')
  ]

  // Primary verify director metadata
  rule primary_verify_meta_snapshot2:
  let root = < pk(~root_seckey), 
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) > 
  in
  [ 
    In(new_snapshot),
    In(sig ),
    PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_snapshot')
  ]
  --[ 
      Eq(verify(sig, new_snapshot, pk(~snapshot_seckey)), true),
      Eq(h(new_snapshot), timestamp),
      PriVerifyMetaDirSnapshot(new_snapshot),
      Unique('primary_verify_meta_snapshot2')
    ]->
  [ 
    PriMeta(root, timestamp, new_snapshot, targets, sigs, 'Verified_meta_snapshot')
  ]

  // Primary verify director metadata
  rule primary_verify_meta_targets:
  let root = < pk(~root_seckey),
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) > 
  in
  [ 
    In(new_targets),
    In(sig),
    PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_snapshot'),
    //PriMeta(root, timestamp, snapshot, targets, sigs, any_state),
    PriLatestTargets(targets, old_sig )
  ]
  --[ 
      Eq(verify(sig, new_targets, pk(~targets_seckey)), true),
      PriVerifyMetaDirTargets(new_targets),
      Unique('primary_verify_meta_targets')
    ]->
  [ 
    PriMeta(root, timestamp, snapshot, new_targets, sig, 'Verified_meta_targets'),
    PriLatestTargets(new_targets, sig)
  ]

  // Primary verify metadata
  rule primary_verify_meta_targets2:
  let root = < pk(~root_seckey), 
                   pk(~timestamp_seckey),
                   pk(~snapshot_seckey), 
                   pk(~targets_seckey) > 
  in
  [ 
    In(new_targets),
    In(sig),
    PriMeta(root, timestamp, snapshot, targets, sigs, 'Verified_meta_targets'),
    //PriMeta(root, timestamp, snapshot, targets, sigs, any_state),
    PriLatestTargets(targets, old_sig )
  ]
  --[ 
      Eq(verify(sig, new_targets, pk(~targets_seckey)), true),
      PriVerifyMetaDirTargets(new_targets),
      Unique('primary_verify_meta_targets2')
    ]->
  [ 
    PriMeta(root, timestamp, snapshot, new_targets, sig, 'Verified_meta_targets'),
    PriLatestTargets(new_targets, sig)
  ]
  
  // Primary sends metadata to secondary
  rule primary_send_metadata:
  let targets = < h(~primary_image), h(~secondary_image) >
      sig = sign(< h(~primary_image), h(~secondary_image) >, ~targets_seckey)
      in
    [ 
      //PriMeta(root, timestamp, snapshot, targets, < sig1, sig2 >, 'Not_verifying')
      PriLatestTargets(targets, sig)
    ]
    --[PriSendMeta(targets), 
       SendTargetsCombined(targets),
       Unique('primary_send_metadata')]->
    [ 
      Out(< targets, sig >),
      //PriMeta(root, timestamp, snapshot, targets, < sig1, sig2 >, 'Not_verifying')
      PriLatestTargets(targets, sig )
    ]
    
  // Secondary verifies metadata from primary
  rule secondary_verify_metadata:
  [  
    In(< new_targets, sig >),
    SecMeta(targets_pubkey, targets)
  ]
  --[ 
      Eq(verify(sig, new_targets, targets_pubkey), true),
      SecVerifyTargetsMetadataDir(new_targets),
      Unique('secondary_verify_metadata')
    ]->
  [     
    SecMeta(targets_pubkey, new_targets)
  ]

  rule secondary_verify_metadata2:
  [  
    In(< new_targets, sig >),
    SecMeta(targets_pubkey, targets)
  ]
  --[ 
      Eq(verify(sig, new_targets, targets_pubkey), true),
      SecVerifyTargetsMetadataDir(new_targets),
      Unique('secondary_verify_metadata2')
    ]->
  [     
    SecMeta(targets_pubkey, new_targets)
  ]

  //////////////////////////
  ////// RESTRICTIONS //////
  //////////////////////////

  restriction Equality:
    "All x y #i. Eq(x, y) @#i ==> x = y"

  restriction LatestDirector:
    "(All x #i #j. LatestDirector('0') @#i & LatestDirector(x) @#j ==>
        x = '0' | #i < #j) &
     (All x #i #j. LatestDirector('1') @#i & LatestDirector(x) @#j ==>
        x = '1' | x = '0' | #i < #j) & 
     (All x #i #j. LatestDirector('2') @#i & LatestDirector(x) @#j ==>
        x = '2' | x = '1' | x = '0' | #i < #j)"

  restriction Unique:
    "All x #i #j. Unique(x) @#i & Unique(x) @#j ==> #i = #j"

  //////////////////////////
  ///////// LEMMAS /////////
  //////////////////////////  

  // Sanity checks
  lemma sanity_check1:
    exists-trace 
      "Ex meta #i. PriVerifyMetaDirRoot(meta) @#i"

  lemma sanity_check2:
    exists-trace 
      "Ex meta #i. PriVerifyMetaDirTimestamp(meta) @#i"

  lemma sanity_check3:
    exists-trace 
      "Ex meta #i. PriVerifyMetaDirSnapshot(meta) @#i"

  lemma sanity_check4:
    exists-trace 
      "Ex meta #i. PriVerifyMetaDirTargets(meta) @#i"

  lemma sanity_check5:
    exists-trace 
      "Ex meta #i. SecVerifyTargetsMetadataDir(meta) @#i"
    
  // Weak and strong authentication
  lemma root_meta_weak_auth: 
    "All root #i. (PriVerifyMetaDirRoot(root) @#i ==> 
      (Ex #j. SendRootMetadataDir(root) @#j & #j<#i))"

  lemma root_meta_strong_auth:
    "All m #i. PriVerifyMetaDirRoot(m) @#i ==> 
      (Ex #j. SendRootMetadataDir(m) @#j
        & #j < #i
        & not (Ex #i2. PriVerifyMetaDirRoot(m) @#i2
                             & not (#i2 = #i)))"

  lemma timestamp_meta_weak_auth: 
    "All ts #i. (PriVerifyMetaDirTimestamp(ts) @#i ==> 
      (Ex #j. SendTimestampMetadataDir(ts) @#j & #j<#i))"

  lemma timestamp_meta_strong_auth:
    "All m #i. PriVerifyMetaDirTimestamp(m) @#i ==> 
      (Ex #j. SendTimestampMetadataDir(m) @#j
        & #j < #i
        & not (Ex #i2. PriVerifyMetaDirTimestamp(m) @#i2
                              & not (#i2 = #i)))"

  lemma snapshot_meta_weak_auth: 
    "All ss #i. (PriVerifyMetaDirSnapshot(ss) @#i ==> 
      (Ex #j. SendSnapshotMetadataDir(ss) @#j & #j<#i))"

  lemma snapshot_meta_strong_auth:
    "All m #i. PriVerifyMetaDirSnapshot(m) @#i ==> 
      (Ex #j. SendSnapshotMetadataDir(m) @#j
        & #j < #i
        & not (Ex #i2. PriVerifyMetaDirSnapshot(m) @#i2
                              & not (#i2 = #i)))"

  // This weak authentication lemma fails. But, on inspection
  // of the counterexample, the adversary still cannot
  // perform __arbitrary__ message injections.
  // In the counterexample, the adversary injects metadata to the primary 
  // that was previously sent from the to the primary. But, no other
  // injections are possible, as proven by the next lemma "targets_meta_weak_auth2".
  // So a *standard attacker* in the CRV model is not
  // applicable here.
  lemma targets_meta_weak_auth1: 
    "All targets #i. (PriVerifyMetaDirTargets(targets) @#i ==> 
      (Ex #j. SendTargetsMetadataDir(targets) @#j & #j<#i))"

  lemma targets_meta_weak_auth2: 
    "All targets #i. (PriVerifyMetaDirTargets(targets) @#i ==> 
      ((Ex #j. SendTargetsMetadataDir(targets) @#j & #j<#i) |
       (Ex #j. PriSendMeta(targets) @#j & #j<#i)))"

  // SendTargetsCombined is the combination of SendTargetsMetadataDir and PriSendMeta.
  lemma targets_meta_strong_auth:
    "All m #i. PriVerifyMetaDirTargets(m) @#i ==> 
      (Ex #j. SendTargetsCombined(m) @#j
        & #j < #i
        & not (Ex #i2. PriVerifyMetaDirTargets(m) @#i2
                              & not (#i2 = #i)))"

  // This weak authentication lemma fails. But, on inspection
  // of the counterexample, the adversary still cannot
  // perform __arbitrary__ message injections.
  // In the counterexample, the adversary injects metadata to the secondary 
  // that was sent from the repo to the primary. But, no other
  // injections are possible, as proven by the next lemma "meta_weak_auth_sec2".
  // So a *standard attacker* in the CRV model is not
  // applicable here.
  lemma meta_weak_auth_sec1: 
    "All targets #i. (SecVerifyTargetsMetadataDir(targets) @#i ==> 
      (Ex #j. PriSendMeta(targets) @#j & #j<#i))"

  lemma meta_weak_auth_sec2: 
    "All targets #i. (SecVerifyTargetsMetadataDir(targets) @#i ==> 
      (Ex #j. SendTargetsMetadataDir(targets) @#j & #j<#i) |
      (Ex #j. PriSendMeta(targets) @#j & #j<#i))"

  lemma meta_strong_auth_sec:
    "All m #i. SecVerifyTargetsMetadataDir(m) @#i ==> 
      (Ex #j. SendTargetsMetadataDir(m) @#j
        & #j < #i
        & not (Ex #i2. SecVerifyTargetsMetadataDir(m) @#i2
                              & not (#i2 = #i))) |
      (Ex #j. PriSendMeta(m) @#j
        & #j < #i
        & not (Ex #i2. SecVerifyTargetsMetadataDir(m) @#i2
                              & not (#i2 = #i)))"
 end